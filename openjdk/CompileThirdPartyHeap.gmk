# Misc variables
YELLOW='\033[1;33m'
NC='\033[0m'

# THIRD_PARTY_HEAP points to mmtk-openjdk/openjdk
MMTK_RUST_ROOT = $(THIRD_PARTY_HEAP)/../mmtk
MMTK_CPP_ROOT = $(THIRD_PARTY_HEAP)

# Grab OpenJDK version specified in mmtk/Cargo.toml and local OpenJDK version
OPENJDK_VERSION=`cd $(MMTK_RUST_ROOT) ; cargo read-manifest --manifest-path=Cargo.toml | python3 -c 'import json,sys; print(json.load(sys.stdin)["metadata"]["openjdk"]["openjdk_version"])'`
OPENJDK_LOCAL_VERSION=`git rev-parse HEAD`

# Get the current host triple. This is used for the PGO build as mentioned in
# the best practices for PGO here:
# https://doc.rust-lang.org/rustc/profile-guided-optimization.html#a-complete-cargo-workflow
HOST_TRIPLE=`rustc -vV | grep host | cut -d' ' -f2`

ifdef MMTK_PLAN
  GC_FEATURES=--features $(MMTK_PLAN)
endif

ifeq ($(MMTK_VO_BIT), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features vo_bit
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",vo_bit"
  endif
endif

ifeq ($(MMTK_MARK_IN_HEADER), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features mark_bit_in_header
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",mark_bit_in_header"
  endif
endif

ifeq ($(MMTK_FORWARDING_ON_SIDE), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features forwarding_bits_on_side
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",forwarding_bits_on_side"
  endif
endif

ifeq ($(MMTK_EXTREME_ASSERTIONS), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features mmtk_extreme_assertions
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",mmtk_extreme_assertions"
  endif
endif

ifeq ($(call check-jvm-feature, jfr), true)
  ifndef GC_FEATURES
    GC_FEATURES=--features jfr
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",jfr"
  endif
endif

ifeq ($(MMTK_MALLOC_MARK_SWEEP), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features malloc_mark_sweep
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",malloc_mark_sweep"
  endif
endif

ifeq ($(MMTK_SANITY), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features mmtk/sanity
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",mmtk/sanity"
  endif
endif

LIB_MMTK := $(JVM_LIB_OUTPUTDIR)/libmmtk_openjdk.so

ifeq ($(DEBUG_LEVEL), release)
  CARGO_PROFILE = release
  CARGO_PROFILE_FLAG = --release
else
  CARGO_PROFILE = debug
endif

CARGO_EXECUTABLE = cargo
CARGO_TARGET = .
CARGO_TARGET_FLAG =

ifeq ($(COMPILE_TYPE), cross)
	ifneq ($(CREATING_BUILDJDK), true)
		# Set the CARGO_TARGET based on the architecture
		ifeq ($(OPENJDK_TARGET_CPU), riscv64)
			CARGO_TARGET = riscv64gc-unknown-linux-gnu
		else ifeq ($(OPENJDK_TARGET_CPU), aarch64)
			CARGO_TARGET = aarch64-unknown-linux-gnu
    else
      CARGO_TARGET = UNSUPPORTED_MMTK_OPENJDK_TARGET_CPU
		endif
		CARGO_EXECUTABLE = cross
		CARGO_TARGET_FLAG = --target $(CARGO_TARGET)
	endif
endif
$(LIB_MMTK): FORCE
	if [[ "$(OPENJDK_VERSION)" != "$(OPENJDK_LOCAL_VERSION)" ]]; then \
		echo -e $(YELLOW)WARNING: Local OpenJDK version does not match version specified in mmtk/Cargo.toml$(NC); \
		echo -e $(YELLOW)Local OpenJDK version $(OPENJDK_LOCAL_VERSION)$(NC); \
		echo -e $(YELLOW)mmtk/Cargo.toml OpenJDK version $(OPENJDK_VERSION)$(NC); \
	fi
	if [[ "$(OPENJDK_TARGET_CPU)" != "riscv64" ]] && [[ "$(OPENJDK_TARGET_CPU)" != "aarch64" ]] && [[ $(CARGO_EXECUTABLE) == "cross" ]]; then \
		echo -e "Only cross compiling to riscv64/aarch64 are supported"; \
		exit 1; \
	fi
	echo "cd $(MMTK_RUST_ROOT) && $(CARGO_EXECUTABLE) --version && $(CARGO_EXECUTABLE) build $(CARGO_TARGET_FLAG) $(CARGO_PROFILE_FLAG) $(GC_FEATURES)"
	cd $(MMTK_RUST_ROOT) && $(CARGO_EXECUTABLE) --version && $(CARGO_EXECUTABLE) build $(CARGO_TARGET_FLAG) $(CARGO_PROFILE_FLAG) $(GC_FEATURES)
	mkdir -p $(JVM_LIB_OUTPUTDIR) && cp $(MMTK_RUST_ROOT)/target/$(CARGO_TARGET)/$(CARGO_PROFILE)/libmmtk_openjdk.so $(LIB_MMTK)

JVM_LIBS += -L$(JVM_LIB_OUTPUTDIR) -lmmtk_openjdk
JVM_LDFLAGS += '-Wl,-rpath,$$ORIGIN'

FORCE:

TARGETS += $(LIB_MMTK)
JVM_SRC_DIRS += $(MMTK_CPP_ROOT)/share $(MMTK_CPP_ROOT)/share/barriers $(MMTK_CPP_ROOT)/cpu/$(HOTSPOT_TARGET_CPU_ARCH)
JVM_CFLAGS += -std=c++14 -fpermissive -DINCLUDE_THIRD_PARTY_HEAP -DTHIRD_PARTY_HEAP_SRC=$(MMTK_CPP_ROOT)/share -I$(MMTK_CPP_ROOT)/share -I$(MMTK_CPP_ROOT)/cpu/$(HOTSPOT_TARGET_CPU_ARCH)
ifeq ($(MMTK_VO_BIT), 1)
  JVM_CFLAGS += -DMMTK_ENABLE_VO_BIT
endif

$(BUILD_LIBJVM): $(LIB_MMTK)
