
MMTK_RUST_ROOT = $(TOPDIR)/../../mmtk
MMTK_CPP_ROOT = $(TOPDIR)/../../openjdk

ifdef MMTK_PLAN
  GC_FEATURES=--features $(MMTK_PLAN)
endif

ifeq ($(MARK_IN_HEADER), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features mark_bit_in_header
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",mark_bit_in_header"
  endif
endif

ifeq ($(MMTK_EXTREME_ASSERTIONS), 1)
  ifndef GC_FEATURES
    GC_FEATURES=--features mmtk_extreme_assertions
  else
    GC_FEATURES:=$(strip $(GC_FEATURES))",mmtk_extreme_assertions"
  endif
endif

LIB_MMTK := $(JVM_LIB_OUTPUTDIR)/libmmtk_openjdk.so

ifeq ($(DEBUG_LEVEL), release)
  CARGO_PROFILE = release
  CARGO_PROFILE_FLAG = --release
else
  CARGO_PROFILE = debug
endif

$(LIB_MMTK): FORCE
	echo "cd $(MMTK_RUST_ROOT) && cargo build $(CARGO_PROFILE_FLAG) $(GC_FEATURES)"
	cd $(MMTK_RUST_ROOT) && cargo build $(CARGO_PROFILE_FLAG) $(GC_FEATURES)
	cp $(MMTK_RUST_ROOT)/target/$(CARGO_PROFILE)/libmmtk_openjdk.so $(LIB_MMTK)

JVM_LIBS += -L$(JVM_LIB_OUTPUTDIR) -lmmtk_openjdk
JVM_LDFLAGS += '-Wl,-rpath,$$ORIGIN'

FORCE:

TARGETS += $(LIB_MMTK)
JVM_SRC_DIRS += $(MMTK_CPP_ROOT) $(MMTK_CPP_ROOT)/barriers
JVM_CFLAGS += -std=c++11 -DINCLUDE_THIRD_PARTY_HEAP -DTHIRD_PARTY_HEAP_SRC=$(MMTK_CPP_ROOT)

$(BUILD_LIBJVM): $(LIB_MMTK)
